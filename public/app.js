(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.3.1
var log, VRDevice;
log = require('./helpers.ls').log;
VRDevice = require('./vr-device.ls');
VRDevice.init(function(arg$){
  var hmd, sensor;
  hmd = arg$[0], sensor = arg$[1];
  return log(hmd, sensor);
});
},{"./helpers.ls":2,"./vr-device.ls":4}],2:[function(require,module,exports){
// Generated by LiveScript 1.3.1
var log, out$ = typeof exports != 'undefined' && exports || this;
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.3.1
var Quaternion, out$ = typeof exports != 'undefined' && exports || this;
out$.Quaternion = Quaternion = (function(){
  Quaternion.displayName = 'Quaternion';
  var prototype = Quaternion.prototype, constructor = Quaternion;
  function Quaternion(x, y, z, w){
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }
  Quaternion.fromOrientation = function(arg$){
    var x, y, z, w;
    x = arg$.x, y = arg$.y, z = arg$.z, w = arg$.w;
    return new Quaternion(x, y, z, w);
  };
  prototype.hyp = function(){
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  };
  prototype.invert = function(){
    var l;
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    l = this.hyp();
    if (l === 0) {
      return new Quaternion(0, 0, 0, 1);
    } else {
      return new Quaternion(this.x * li, this.y * li, this.z * li, this.w * li);
    }
  };
  prototype.toMatrix = function(invert){
    var x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz;
    x2 = this.x + this.x;
    y2 = this.y + this.y;
    z2 = this.z + this.z;
    xx = this.x * x2;
    xy = this.x * y2;
    xz = this.x * z2;
    yy = this.y * y2;
    yz = this.y * z2;
    zz = this.z * z2;
    wx = this.w * x2;
    wy = this.w * y2;
    wz = this.w * z2;
    return [1 - (yy + zz), xy + wz, xz - wy, 0, xy - wz, 1 - (xx + zz), yz + wx, 0, xz + wy, yz - wx, 1 - (xx + yy), 0, 0, 0, 0, 1];
  };
  return Quaternion;
}());
},{}],4:[function(require,module,exports){
// Generated by LiveScript 1.3.1
var log, Quaternion, LOGGING, vrHmd, vrSensor, cssCamera, cssContainer, onkey, init, frame, out$ = typeof exports != 'undefined' && exports || this;
log = function(){
  if (LOGGING) {
    console.apply(console, arguments);
    return arguments[0];
  }
};
Quaternion = require('./quaternion.ls').Quaternion;
LOGGING = false;
vrHmd = null;
vrSensor = null;
cssCamera = null;
cssContainer = null;
onkey = function(arg$){
  var charCode;
  charCode = arg$.charCode;
  switch (String.fromCharCode(charCode)) {
  case 'f':
    return cssContainer.mozRequestFullScreen({
      vrDisplay: vrHmd
    });
  case 'z':
    return vrSensor.zeroSensor();
  }
};
out$.init = init = function(λSuccess, λError){
  log('VR::Init - Searching for HMD');
  cssCamera = document.getElementById('camera');
  cssContainer = document.getElementById('container');
  if (navigator.getVRDevices == null) {
    λError({
      code: 3,
      message: "WebVR not supported in this browser"
    });
  }
  log("VR::Init - Requesting VR Devices from useragent...");
  return navigator.getVRDevices().then(function(devices){
    var i$, len$, device, hmd, sensor;
    log("VR::Init - Browsing VR Devices (" + devices.length + " devices)");
    for (i$ = 0, len$ = devices.length; i$ < len$; ++i$) {
      device = devices[i$];
      if (device instanceof HMDVRDevice) {
        log("VR::Init - Found HMD '" + device.deviceName + "'");
        hmd = device;
        break;
      }
    }
    if (hmd == null) {
      error("VR:Init - Failed to find any HMD");
      λError({
        code: 1,
        message: "No HMD detected."
      });
    }
    for (i$ = 0, len$ = devices.length; i$ < len$; ++i$) {
      device = devices[i$];
      if (device instanceof PositionSensorVRDevice) {
        if (device.hardwareUnitId === hmd.hardwareUnitId) {
          log("VR::init - Found VR Position Sensor '" + device.deviceName + "' matching '" + hmd.deviceName + "'");
          sensor = device;
          break;
        } else {
          log("VR::init - Found VR Position Sensor '" + device.deviceName + "' but no HMD match.");
        }
      }
    }
    if (sensor == null) {
      log("VR::init - Found an HMD, but didn't find it's orientation sensor.");
      λError({
        code: 2,
        message: "No matching sensor found"
      });
    }
    return λSuccess([hmd, sensor]);
  });
};
out$.frame = frame = function(){
  var o, m;
  requestAnimationFrame(frame);
  o = Quaternion.fromOrientation(vrSensor.getState().orientation, true);
  m = o.toMatrix();
  return cssCamera.style.transform = "matrix3d(" + m + ") translate3d(0,0,0) rotateZ(180deg) rotateY(180deg)";
};
},{"./quaternion.ls":3}]},{},[1]);
